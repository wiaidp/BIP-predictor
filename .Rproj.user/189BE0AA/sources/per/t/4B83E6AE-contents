# enetVAR() estimates a VAR using ElasticNet & calculates IRFs and Sigma
#
# At present, it only calculates the IRF for the *first* series in X.
#
# SYNTAX:
# X           the series to include in the VAR (N x K matrix)
# p           [= 1] Number of lags in the VAR (integer > 0)
# nIRF        [=20] Max number of lags for which to calculate IRF
# nsteps      (integer !< 0)
#             This sets the value of s on enet.predict(), which controls the
#             sparsity of the estimated VAR.
#             Default is no restrictions imposed => LS
# mode        NOT YET IMPLEMENTED.
#               Used to set interpretation of nsteps in predict.enet().
#               "step" means nstep indexes the LARS-EN step number.
#                     Requires nstep !< 0 & nstep !> 1 1 + p*K
#               ["fraction"] means nstep is the ratio of the L1 norm relative 
#                   to the norm at the LS solution
#                     Requires nstep !< 0 & nstep !> 1
#
# quiet       [=F] Boolean. When True, suppresses most output.
# 
#   The following options are only used for the IRF plot (when quiet == F)
#
# cpalette  [= "ggplot2"] Select colour palette for IRF plot 
#               Call palette.pals() to see available pre-defined palettes.
#               See palette() to define a custom palette.
# lwd       [= 3] Sets line width in IRF plot
# cex       [=1 ] Scaling factor for legend in IRF plot
#             

library(MTS)
library(elasticnet)

path.main <- '~/GitHub/BIP-predictor'
source(paste0(path.main,'/R/mat_lag.R')) # creates columns of AR lags from matrices
source(paste0(path.main,"/R/GetBIPdata.R")) # loads the mSSA data set


enetVAR <- function(X, p = 1, nIRF = 20, nsteps = NULL, mode = 'step', 
                    quiet = F, cpalette = "ggplot2", lwd = 3, cex = 1){

  nvar <- ncol(X) 
  Xnames <- colnames(X)
  MyX <- mat_lag(X, p)  # Include 1:p lags of all variables 
  MyY <- X[-(1:p),]     # Drop the first p lags of all variables

  # Clear space to hold the enet objects
  MyENets <- vector("list", nvar) # list of enet() results
  names(MyENets) <- Xnames
  
  # Create list to hold returned objects
  out_list <- vector("list", 4)   # list of things to return
  names(out_list) <- c("Phi", "IRF", "Resids", "Sigma")
  out_list$Phi <- matrix(NA, nrow = nvar, ncol = p*nvar)
  rownames(out_list$Phi) <- Xnames
  colnames(out_list$Phi) <- paste(rep(Xnames,p),
                                  rep(1:p, each = nvar),
                                  sep = '_L')

  # Clear space to hold the fitted values and residuals
  ENetFits <- matrix(NA, nrow = nrow(X)-p, ncol = nvar)
  colnames(ENetFits) <- Xnames

  # default value for degree of regularization should be LS
  if (is.null(nsteps)) nsteps = 1 + ncol(MyX)
  # Estimate the ElasticNets for each equation of the VAR
  for (j in 1:nvar) {
    # Estimate the enet 
    MyENets[[j]] <- enet(MyX, MyY[,j])
    # Store the regularized coefficients 
    out_list$Phi[j,] <- MyENets[[j]]$beta.pure[nsteps,]
  }
  if (!quiet) {
    print("Estimated VAR Coefficients:")
    print(out_list$Phi)
  }
  
  # Calculate the IRFs for the *first* series only! 
  # To change this, change  $psi[1,]   to  $psi  on the next line 
  #   and redimension the results
  out_list$IRF <- matrix(VARpsi(out_list$Phi, lag = nIRF)$psi[1,], ncol = nvar, byrow = T)
  colnames(out_list$IRF) <- Xnames   # labels source of shocks
  rownames(out_list$IRF) <- seq.int(from = 0, to = nIRF) # labels lags     
  if (!quiet) {
    print("Estimated IRF for 1st Variable:")
    print(t(out_list$IRF))
    
    # save the old colour palette, just in case
    old_colours <- palette()
    if (!identical(old_colours, cpalette)) palette(cpalette)
    plot(0:nIRF, out_list$IRF[,1], type = "l",
         main = paste0("Regularized VAR(", p, "): ElasticNet"),
         ylab = paste("IRF for", Xnames[1]),
         xlab = "Lag",
         lwd = 3, col = 1)
    for (j in 2:nvar)
    lines(0:nIRF, out_list$IRF[,j], lwd = 3, col = j)
    legend("topright", 
           legend = Xnames, 
           col = 1:nvar, 
           lwd = 3,
           cex = cex,
           title = "Shocks to:")
    # restore the old colour palette
    palette(old_colours)
  }
  
  # Calculate the residuals and estimate Sigma
  for (j in 1:nvar) {
    # Retrive the fitted values for each equation
    ENetFits[,j] <- predict.enet(MyENets[[j]], 
                                 newx = MyX, 
                                 s = nsteps,
                                 type = "fit", 
                                 mode = mode)$fit
  }
  # Calculate the residuals
  out_list$Resids <- MyY - ENetFits
  # Estimate Sigma as the sample VCV of the residuals
  out_list$Sigma <- cov(out_list$Resids)
  
  if (!quiet) {
    print(paste('The VCV matrix of the estimated VAR residuals is:\n'))
    print( out_list$Sigma)
  }
  
  return(out_list)
  
}