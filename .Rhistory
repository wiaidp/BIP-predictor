pdf(file = paste(path.out,file,sep=""), paper = "special", width = 7.5, height = 6)
par(mfrow=c(2,2))
hp_two<-c(HP_obj$hp_mse[L:2],HP_obj$hp_mse)
plot(hp_two,main=paste("Two-sided HP(",lambda_HP,")",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L,L-1+10,L-1+20,length(hp_two)),labels=c(1,11,21,L,L+10,L+20,length(hp_two))-L)
axis(2)
box()
hp_c<-HP_obj$hp_trend
plot(hp_c,main=paste("One-sided HP(",lambda_HP,")",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L),labels=-1+c(1,11,21,L))
axis(2)
box()
# Analyze filter in frequency-domain (amplitude function)
# Specify the number of equidistant frequency ordinates in [0,pi]
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_two,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main=paste("Amplitude HP(",lambda_HP,")",sep=""),ylim=c(min(mplot),max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_c,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main="Amplitude HP-C",ylim=c(0,max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
abline(h=0)
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
dev.off()
par(mfrow=c(2,2))
hp_two<-c(HP_obj$hp_mse[L:2],HP_obj$hp_mse)
plot(hp_two,main=paste("Two-sided HP(",lambda_HP,")",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L,L-1+10,L-1+20,length(hp_two)),labels=c(1,11,21,L,L+10,L+20,length(hp_two))-L)
axis(2)
box()
hp_c<-HP_obj$hp_trend
plot(hp_c,main=paste("(One-sided) HP(",lambda_HP,")-C",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L),labels=-1+c(1,11,21,L))
axis(2)
box()
# Analyze filter in frequency-domain (amplitude function)
# Specify the number of equidistant frequency ordinates in [0,pi]
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_two,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main=paste("Amplitude HP(",lambda_HP,")",sep=""),ylim=c(min(mplot),max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_c,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main="Amplitude HP-C",ylim=c(0,max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
abline(h=0)
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
par(mfrow=c(2,2))
hp_two<-c(HP_obj$hp_mse[L:2],HP_obj$hp_mse)
plot(hp_two,main=paste("Two-sided HP(",lambda_HP,")",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L,L-1+10,L-1+20,length(hp_two)),labels=c(1,11,21,L,L+10,L+20,length(hp_two))-L)
axis(2)
box()
hp_c<-HP_obj$hp_trend
plot(hp_c,main=paste("(One-sided) HP-C",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L),labels=-1+c(1,11,21,L))
axis(2)
box()
# Analyze filter in frequency-domain (amplitude function)
# Specify the number of equidistant frequency ordinates in [0,pi]
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_two,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main=paste("Amplitude HP(",lambda_HP,")",sep=""),ylim=c(min(mplot),max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_c,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main="Amplitude HP-C",ylim=c(0,max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
abline(h=0)
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
L<-31
HP_obj<-HP_target_mse_modified_gap(L,lambda_HP)
# Classic concurrent (one-sided) HP filter
file = "./Figures/hp_160.pdf"
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 7.5, height = 6)
L<-31
HP_obj<-HP_target_mse_modified_gap(L,lambda_HP)
# Classic concurrent (one-sided) HP filter
file = "./Figures/hp_160.pdf"
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 7.5, height = 6)
par(mfrow=c(2,2))
hp_two<-c(HP_obj$hp_mse[L:2],HP_obj$hp_mse)
plot(hp_two,main=paste("Two-sided HP(",lambda_HP,")",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L,L-1+10,L-1+20,length(hp_two)),labels=c(1,11,21,L,L+10,L+20,length(hp_two))-L)
axis(2)
box()
hp_c<-HP_obj$hp_trend
plot(hp_c,main=paste("(One-sided) HP-C",sep=""),axes=F,type="l",xlab="Lags",ylab="")
abline(h=0)
axis(1,at=c(1,11,21,L),labels=-1+c(1,11,21,L))
axis(2)
box()
# Analyze filter in frequency-domain (amplitude function)
# Specify the number of equidistant frequency ordinates in [0,pi]
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_two,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main=paste("Amplitude HP(",lambda_HP,")",sep=""),ylim=c(min(mplot),max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
K<-600
# Compute transfer, amplitude and shift functions (shift=phase divided by frequency)
amp_obj_hp_c<-amp_shift_func(K,hp_c,F)
# Plot amplitude function
mplot<-matrix(amp_obj_hp_c$amp,ncol=1)
colnames(mplot)<-paste("Concurrent HP, lambda=",lambda_HP,sep="")
colo<-c("blue",rainbow(ncol(mplot)))
plot(mplot[,1],type="l",axes=F,xlab="Frequency",ylab="",main="Amplitude HP-C",ylim=c(0,max(mplot)),col=colo[1])
if (ncol(mplot)>1)
{
lines(mplot[,2],col=colo[2])
abline(v=which(mplot[,1]==max(mplot[,1])),col=colo[1])
mtext(colnames(mplot)[1],line=-1,col=colo[1])
for (i in 2:ncol(mplot))
{
lines(mplot[,i],col=colo[i])
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
}
abline(h=0)
axis(1,at=1+0:4*K/4,labels=expression(0, pi/4, 2*pi/4,3*pi/4,pi))
axis(2)
box()
dev.off()
par(mfrow=c(1,2))
colo<-c("black", "red", "green", "blue", "orange", "dimgray")
mplot<-gammak
colnames(mplot)[1]<-"GDP"
plot(mplot[,1],main="M-MSE",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
legend("topright", legend = colnames(mplot), col = colo, lty = 1, lwd = 1, bty = "n")
box()
mplot<-bk
plot(mplot[,1],main="M-SSA",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
box()
hp_c_out<-filter(x_mat[,select],hp_c,side=1)
par(mfrow=c(1,1))
#mplot<-scale(cbind(target_shifted_mat,hp_c_out,mssa[,select],mssa_HT_HP_C[,select],mmse[,select]))
#dim(mplot)
#colnames(mplot)<-c("Target: HP-BIP","HP-C","M-SSA smaller HT","M-SSA larger HT","M-MSE")
mplot<-scale(cbind(target_shifted_mat,mssa[,select],mmse[,select]))
dim(mplot)
colnames(mplot)<-c("Target: HP-GDP","M-SSA","M-MSE")
mssa<-t(mssa_array[,,1])
mmse<-t(mmse_array[,,1])
mssa_HT_HP_C<-t(mssa_array_HT_HP_C[,,1])
hp_c_out<-filter(x_mat[,select],hp_c,side=1)
par(mfrow=c(1,1))
#mplot<-scale(cbind(target_shifted_mat,hp_c_out,mssa[,select],mssa_HT_HP_C[,select],mmse[,select]))
#dim(mplot)
#colnames(mplot)<-c("Target: HP-BIP","HP-C","M-SSA smaller HT","M-SSA larger HT","M-MSE")
mplot<-scale(cbind(target_shifted_mat,mssa[,select],mmse[,select]))
dim(mplot)
colnames(mplot)<-c("Target: HP-GDP","M-SSA","M-MSE")
h_vec<-0
# We rely on data with Pandemic
#   -M-SSA is not affected since the in-sample span ends in 2008
if (recompute_results)
{
# Run the wrapper, see tutorial 7.2
#   -The function computes M-SSA for each forecast horizon h in h_vec
mssa_indicator_obj<-compute_mssa_BIP_predictors_func(x_mat,lambda_HP,L,date_to_fit,p,q,ht_mssa_vec,h_vec,f_excess,lag_vec,select_vec_multi,nsteps,VAR_type,lambda_BVAR)
# Replicate HT of HP-C
# Theoretical HT
ht_hp_c<-compute_holding_time_func(hp_c)$ht
# Sample HT: want to replicate sample HT in nowcast example and compare target correlations
ht_hp_c<-8
ht_mssa_vec_HP_C<-c(ht_hp_c,  6.738270,   7.232453,   7.225927,   7.033768)
mssa_indicator_HP_HT_obj<-compute_mssa_BIP_predictors_func(x_mat,lambda_HP,L,date_to_fit,p,q,ht_mssa_vec_HP_C,h_vec,f_excess,lag_vec,select_vec_multi,nsteps,VAR_type,lambda_BVAR)
if (VAR_type=="VAR")
{
save(mssa_indicator_obj,file=paste(path.result,"/nowcast_obj",sep=""))
save(mssa_indicator_HP_HT_obj,file=paste(path.result,"/nowcast_HT_HP_obj",sep=""))
}
if (VAR_type=="BVAR")
{
save(mssa_indicator_obj,file=paste(path.result,"/BV_nowcast_obj",sep=""))
save(mssa_indicator_HP_HT_obj,file=paste(path.result,"/BV_nowcast_HT_HP_obj",sep=""))
}
if (VAR_type=="elastic_net")
{
save(mssa_indicator_obj,file=paste(path.result,"/en_nowcast_obj",sep=""))
save(mssa_indicator_HP_HT_obj,file=paste(path.result,"/en_nowcast_HT_HP_obj",sep=""))
}
} else
{
if (VAR_type=="VAR")
{
load(file=paste(path.result,"/nowcast_obj",sep=""))
load(file=paste(path.result,"/nowcast_HT_HP_obj",sep=""))
}
if (VAR_type=="BVAR")
{
load(file=paste(path.result,"/BV_nowcast_obj",sep=""))
load(file=paste(path.result,"/BV_nowcast_HT_HP_obj",sep=""))
}
if (VAR_type=="elastic_net")
{
load(file=paste(path.result,"/en_nowcast_obj",sep=""))
load(file=paste(path.result,"/en_nowcast_HT_HP_obj",sep=""))
}
}
# Select M-SSA output for BIP: tracks HP-BIP
select<-"BIP"
dim(mssa_indicator_obj$bk_x_array)
# Dimensions of bk_x_array:
# 1. Which series do we target: depending on the series various settings may be used (forecast excess)
# 2. The corresponding M-SSA components
# 3. L*length(select_vec): filter weights attributed to the indicators
# 4. Forecast horizon h
bk<-matrix(mssa_indicator_obj$bk_x_array[select,select,,"h=0"],nrow=L)
gammak<-matrix(mssa_indicator_obj$gammak_x_mse[select,select,,"h=0"],nrow=L)
colnames(bk)<-colnames(gammak)<-select_vec_multi
# Target series: output of two-sided HP applied to BIP:
#   -The target is forward-shifted by the forecast horizon (plus publication lag)
target_shifted_mat<-mssa_indicator_obj$target_shifted_mat
# Original M-SSA predictor, see tutorial 7.3 (equal-weighting of M-SSA outputs)
#   -One predictor available for each forecast horizon in h_vec
predictor_mssa_mat<-mssa_indicator_obj$predictor_mssa_mat
# M-SSA components, see tutorial 7.2
#   -This is a three dimensional array
#   -For each forecast horizon and for each indicator we obtain the M-SSA predictor when targeting
#     the two-sided HP applied to this indicator, see exercise 1.1 below
mssa_array<-mssa_indicator_obj$mssa_array
# M-MSE components
# -Same as mssa_array but without HT imposed, i.e., classic multivariate mean-square error signal extraction
# -Forecast performances, see exercise 5 below
mmse_array<-mssa_indicator_obj$mmse_array
# Select M-SSA output of design replicating HT of HP-C
mssa_array_HT_HP_C<-mssa_indicator_HP_HT_obj$mssa_array
bk_HP_HP_C<-matrix(mssa_indicator_HP_HT_obj$bk_x_array[select,select,,"h=0"],nrow=L)
colnames(bk_HP_HP_C)<-select_vec_multi
file = "./Figures/bk_gammak.pdf"
pdf(file = paste(path.out,file,sep=""), paper = "special", width = 7, height = 7)
par(mfrow=c(1,2))
colo<-c("black", "red", "green", "blue", "orange", "dimgray")
mplot<-gammak
colnames(mplot)[1]<-"GDP"
plot(mplot[,1],main="M-MSE",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
legend("topright", legend = colnames(mplot), col = colo, lty = 1, lwd = 1, bty = "n")
box()
mplot<-bk
plot(mplot[,1],main="M-SSA",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
box()
dev.off()
par(mfrow=c(1,2))
colo<-c("black", "red", "green", "blue", "orange", "dimgray")
mplot<-gammak
colnames(mplot)[1]<-"GDP"
plot(mplot[,1],main="M-MSE",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
legend("topright", legend = colnames(mplot), col = colo, lty = 1, lwd = 1, bty = "n")
box()
mplot<-bk
plot(mplot[,1],main="M-SSA",axes=F,type="l",xlab="",ylab="",col=colo[1],ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
}
abline(h=0)
axis(1,at=c(1,1+5*1:(nrow(mplot)/5)),labels=c(0,5*1:(nrow(mplot)/5)))
axis(2)
box()
mssa<-t(mssa_array[,,1])
mmse<-t(mmse_array[,,1])
mssa_HT_HP_C<-t(mssa_array_HT_HP_C[,,1])
hp_c_out<-filter(x_mat[,select],hp_c,side=1)
par(mfrow=c(1,1))
#mplot<-scale(cbind(target_shifted_mat,hp_c_out,mssa[,select],mssa_HT_HP_C[,select],mmse[,select]))
#dim(mplot)
#colnames(mplot)<-c("Target: HP-BIP","HP-C","M-SSA smaller HT","M-SSA larger HT","M-MSE")
mplot<-scale(cbind(target_shifted_mat,mssa[,select],mmse[,select]))
dim(mplot)
colnames(mplot)<-c("Target: HP-GDP","M-SSA","M-MSE")
rownames(mplot)<-rownames(x_mat)
mplot<-mplot[L:nrow(mplot),]
colo<-c("black","violet","blue","orange","green")
colo<-c("black","blue","green")
main_title<-"Nowcasting HP-GDP"
plot(mplot[,1],main=main_title,axes=F,type="l",xlab="",ylab="",col=colo[1],lwd=1,ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
mtext(colnames(mplot)[1],col=colo[1],line=-1)
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
abline(h=0)
abline(v=which(rownames(mplot)>date_to_fit)[1],lty=2,lwd=2)
#abline(v=1+which(sign(mplot[2:nrow(mplot),3])!=sign(mplot[1:(nrow(mplot)-1),3])),col=colo[3])
#abline(v=1+which(sign(mplot[2:nrow(mplot),2])!=sign(mplot[1:(nrow(mplot)-1),2])),col=colo[2])
axis(1,at=c(1,4*1:(nrow(mplot)/4)),labels=rownames(mplot)[c(1,4*1:(nrow(mplot)/4))])
axis(2)
box()
mat_cor_ht<-rbind(c(cor(na.exclude(mplot[,c("Target: HP-GDP","M-SSA")]))[1,2],
cor(na.exclude(mplot[,c("Target: HP-GDP","M-MSE")]))[1,2]),
c(compute_empirical_ht_func(na.exclude(mssa[,select]))$empirical_ht,
compute_empirical_ht_func(na.exclude(mmse[,select]))$empirical_ht))
colnames(mat_cor_ht)<-c("M-SSA","M-MSE")
rownames(mat_cor_ht)<-c("Target correlation","HT")
# Keep M-MSE and M-SSA only
hp_c_out<-filter(x_mat[,select],hp_c,side=1)
par(mfrow=c(1,1))
#mplot<-scale(cbind(target_shifted_mat,hp_c_out,mssa[,select],mssa_HT_HP_C[,select],mmse[,select]))
#dim(mplot)
#colnames(mplot)<-c("Target: HP-BIP","HP-C","M-SSA smaller HT","M-SSA larger HT","M-MSE")
mplot<-scale(cbind(mssa[,select],mmse[,select]))
dim(mplot)
colnames(mplot)<-c("M-SSA","M-MSE")
rownames(mplot)<-rownames(x_mat)
mplot<-mplot[L:nrow(mplot),]
mplot<-mplot[which(rownames(mplot)>2006&rownames(mplot)<2013),]
colo<-c("black","violet","blue","orange","green")
colo<-c("blue","green")
main_title<-"Zero-Crossings of M-SSA and M-MSE towards the financial crisis"
plot(mplot[,1],main=main_title,axes=F,type="l",xlab="",ylab="",col=colo[1],lwd=1,ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
mtext(colnames(mplot)[1],col=colo[1],line=-1)
for (i in 1:ncol(mplot))
{
lines(mplot[,i],col=colo[i],lwd=1,lty=1)
mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
abline(h=0)
abline(v=1+which(sign(mplot[2:nrow(mplot),1])!=sign(mplot[1:(nrow(mplot)-1),1])),col=colo[1],lty=2)
abline(v=1+which(sign(mplot[2:nrow(mplot),2])!=sign(mplot[1:(nrow(mplot)-1),2])),col=colo[2],lty=2)
axis(1,at=c(1,4*1:(nrow(mplot)/4)),labels=rownames(mplot)[c(1,4*1:(nrow(mplot)/4))])
axis(2)
box()
rm(list=ls())
path.main<-getwd()
path.out<-paste(path.main,"/Latex/",sep="")
path.sweave<-paste(path.main,"/Sweave/",sep="")
#------------------------------
paper<-"BIP_predictor"
script <- paste(path.sweave,paper,sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,paper,".tex",sep=""))
VAR_type
rm(list=ls())
path.main<-getwd()
path.out<-paste(path.main,"/Latex/",sep="")
path.sweave<-paste(path.main,"/Sweave/",sep="")
#------------------------------
paper<-"BIP_predictor"
script <- paste(path.sweave,paper,sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,paper,".tex",sep=""))
